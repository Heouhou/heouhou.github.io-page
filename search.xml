<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot项目搭建 :使用Swagger2构建强大的RESTful API文档</title>
      <link href="/2019/05/16/springboot-swagger2/"/>
      <url>/2019/05/16/springboot-swagger2/</url>
      
        <content type="html"><![CDATA[<h3 id="1-添加Swagger2依赖"><a href="#1-添加Swagger2依赖" class="headerlink" title="1. 添加Swagger2依赖"></a>1. 添加Swagger2依赖</h3><p> 在pom.xml中加入Swagger2的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建Swagger2配置类"><a href="#2-创建Swagger2配置类" class="headerlink" title="2. 创建Swagger2配置类"></a>2. 创建Swagger2配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value</span>(value = <span class="string">"$&#123;swagger.enabled&#125;"</span>)</span><br><span class="line">  Boolean swaggerEnabled;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">/* ParameterBuilder tokenParam = new ParameterBuilder();</span></span><br><span class="line"><span class="comment">    List&lt;Parameter&gt; params = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">    tokenParam.name("Authorization").description("令牌Token").modelRef(new ModelRef("string"))</span></span><br><span class="line"><span class="comment">        .parameterType("header").required(false).build();</span></span><br><span class="line"><span class="comment">    params.add(tokenParam.build());*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">        .groupName(<span class="string">"v1.0"</span>)</span><br><span class="line">        .apiInfo(apiInfo())</span><br><span class="line">        .enable(swaggerEnabled)</span><br><span class="line">        .select()</span><br><span class="line">        .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.example.demo"</span>))</span><br><span class="line">        .paths(PathSelectors.any())</span><br><span class="line">        .build()</span><br><span class="line">        .pathMapping(<span class="string">""</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">        .title(<span class="string">"SpringBootDemo-API"</span>)</span><br><span class="line">        .description(<span class="string">"SpringBoot项目搭建"</span>)</span><br><span class="line">        .contact(<span class="keyword">new</span> Contact(<span class="string">"hou"</span>, <span class="string">"www.buhaoji.top"</span>, <span class="string">"843882065@qq.com"</span>))</span><br><span class="line">        .version(<span class="string">"1.0.0"</span>)</span><br><span class="line">        .build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码所示，通过@Configuration注解，让Spring来加载该类配置。再通过@EnableSwagger2注解来启用Swagger2。<br><br>再通过createRestApi函数创建Docket的Bean之后，apiInfo()用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。select()函数返回一个ApiSelectorBuilder实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被@ApiIgnore指定的请求）。</p><h3 id="3-添加文档内容"><a href="#3-添加文档内容" class="headerlink" title="3. 添加文档内容"></a>3. 添加文档内容</h3><p>在完成了上述配置后，其实已经可以生产文档内容，但是这样的文档主要针对请求本身，而描述主要来源于函数等命名产生，对用户并不友好，我们通常需要自己增加一些说明来丰富文档内容。如下所示，我们通过@ApiOperation注解来给API增加说明、通过@ApiImplicitParams、@ApiImplicitParam注解来给参数增加说明。</p><p>//TODO</p><h3 id="4-swagger-相关注解"><a href="#4-swagger-相关注解" class="headerlink" title="4.swagger 相关注解"></a>4.swagger 相关注解</h3><h3 id="5-swagger-分组"><a href="#5-swagger-分组" class="headerlink" title="5.swagger 分组"></a>5.swagger 分组</h3>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC之请求参数的获取方式</title>
      <link href="/2019/05/15/springmvc-zhi-qing-qiu-can-shu-de-huo-qu-fang-shi/"/>
      <url>/2019/05/15/springmvc-zhi-qing-qiu-can-shu-de-huo-qu-fang-shi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.hhui.top/hexblog/2018/01/04/SpringMVC%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E8%8E%B7%E5%8F%96%E6%96%B9%E5%BC%8F/#top" target="_blank" rel="noopener">原文链接</a></p><h2 id="SpringMVC之请求参数的获取方式"><a href="#SpringMVC之请求参数的获取方式" class="headerlink" title="SpringMVC之请求参数的获取方式"></a>SpringMVC之请求参数的获取方式</h2><h3 id="I-GET请求参数获取"><a href="#I-GET请求参数获取" class="headerlink" title="I. GET请求参数获取"></a>I. GET请求参数获取</h3><p>get请求参数，一般都是直接挂在请求的url上，所以获取这些参数还是比较简单的</p><h4 id="1-通过-HttpServletRequest获取参数"><a href="#1-通过-HttpServletRequest获取参数" class="headerlink" title="1. 通过 HttpServletRequest获取参数"></a>1. 通过 HttpServletRequest获取参数</h4><p>这个可以说是最基本最常见的的方式了，  <span style="text-shadow: 5px 5px 5px #00FF00;">javax.servlet.ServletRequest#getParameter</span>来获取对应的参数 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"webs/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"req1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">req1</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String user = request.getParameter(<span class="string">"user"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"req1 user: "</span> + user + <span class="string">" pwd: "</span> + password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">根据上面暴露的接口，我们测试的case就很简单了</span><br><span class="line">http://127.0.0.1:8080/webs/demo/req1?user=小灰灰Blog&amp;password=123456</span><br><span class="line"><span class="section">## 输出  req1 user: 小灰灰Blog pwd: 123456</span></span><br><span class="line"></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req1?user=小灰灰Blog</span><br><span class="line"><span class="section">## 输出  req1 user: 小灰灰Blog pwd: null</span></span><br></pre></td></tr></table></figure><p> <span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #33F6FF">说明:</span></p><ul><li>这是一个最基本的获取参数的方式，get，post请求都适用的，通常在filter,intercepter中也是可以通过HttpServletRequest对象来获取请求参数</li><li>除了获取常见的请求参数之外，HttpServletRequest可以获取请求头的完整信息</li><li>在一次请求的生命周期内，可以通过下面的方式获取Request对象(当然也可以获取response对象)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest httpServletRequest = ((ServletRequestAttributes) </span><br><span class="line">    RequestContextHolder.getRequestAttributes()).getRequest();</span><br></pre></td></tr></table></figure><h4 id="2-直接方法参数获取"><a href="#2-直接方法参数获取" class="headerlink" title="2. 直接方法参数获取"></a>2. 直接方法参数获取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"req2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">req2</span><span class="params">(String user, String password)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"req2 user: "</span> + user + <span class="string">" pwd: "</span> + password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">请求验证</span><br><span class="line">http://127.0.0.1:8080/webs/demo/req2?user=%E5%B0%8F%E7%81%B0%E7%81%B0Blog&amp;password=123456</span><br><span class="line"><span class="section">## 输出： req2 user: 小灰灰Blog pwd: 123456</span></span><br><span class="line"></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req2?password=123456</span><br><span class="line"><span class="section">## 输出： req2 user: null pwd: 123456</span></span><br><span class="line"></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req2?password=123456&amp;User=blog</span><br><span class="line"><span class="section">## 输出： req2 user: null pwd: 123456</span></span><br></pre></td></tr></table></figure><p> <span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #FF5733">注意:</span></p><ul><li>上面这种使用方式，相当于直接将url参数映射到了Controller方法的参数上了</li><li>方法参数名必须和url参数名完全一致（区分大小写）</li><li>顺序无关</li><li>若参数没传，则默认为null</li></ul><blockquote><p>一个疑问 <br><br>上面的demo中Controller的方法参数都是String还好，如果将password改成int，会出现什么情况<br></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"req2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">req2</span><span class="params">(String user, <span class="keyword">int</span> password)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"req2 user: "</span> + user + <span class="string">" pwd: "</span> + password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际测试</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># case1 </span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req2?password=123456&amp;user=blog</span><br><span class="line"><span class="section">## 输出： req2 user: blog pwd: 123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section"># case 2</span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req2?password2=123456&amp;user=blog</span><br><span class="line"><span class="section">## 输出: 报错, Optional int parameter 'password' is present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section"># case 3</span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req2?password=abc&amp;user=blog</span><br><span class="line"><span class="section">## 输出：报错, "Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "abc""</span></span><br></pre></td></tr></table></figure><p><span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #33F6FF">说明:</span></p><ul><li>如果请求参数与方法参数类型不一致，会抛出转换异常</li><li>如果方法参数为非封装基本类型，则url参数必须存在，否则报错</li></ul><h4 id="3-RequestParam注解方式获取请求参数"><a href="#3-RequestParam注解方式获取请求参数" class="headerlink" title="3. RequestParam注解方式获取请求参数"></a>3. RequestParam注解方式获取请求参数</h4><p>通过@RequestParam注解获取参数的方式和上面的一种比较类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"req3"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">req3</span><span class="params">(@RequestParam(<span class="string">"user"</span>)</span> String username,</span></span><br><span class="line"><span class="function">                   @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String pwd) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"req3 user: "</span> + username + <span class="string">" pwd: "</span> + pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># case1 </span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req3?password=123456&amp;user=blog</span><br><span class="line"><span class="section">## 输出: req3 user: blog pwd: 123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section"># case2</span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req3?password=123456</span><br><span class="line"><span class="section">## 输出：报错， Required String parameter 'user' is not presen</span></span><br></pre></td></tr></table></figure><p><span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #33F6FF">说明:</span></p><ul><li>不指定注解的name或value属性时，等同于第二种使用姿势</li><li>注解的name属性或value属性，用实际的参数名来指定</li><li>controller的参数名与url参数名没有强关联（区别第二种方式）</li><li>参数类型需要保证一致（通第二种方式）</li><li>如果url参数可选，请设置require属性为false，如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestParam</span>(name = <span class="string">"user"</span>,  required = <span class="keyword">false</span>) String username</span><br></pre></td></tr></table></figure><h4 id="4-Bean方式获取参数"><a href="#4-Bean方式获取参数" class="headerlink" title="4. Bean方式获取参数"></a>4. Bean方式获取参数</h4><p>对于请求参数比较复杂的情况下，我比较喜欢这种使用姿势，管理起来方便简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDO</span> </span>&#123;</span><br><span class="line">    String user;</span><br><span class="line">    String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"req4"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">req4</span><span class="params">(UserDO userDO)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"req4 userDO: "</span> + userDO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试case</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># case1</span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req4?password=123456&amp;user=%E5%B0%8F%E7%81%B0%E7%81%B0Blog</span><br><span class="line"><span class="section">## 输出: req4 userDO: DemoController.UserDO(user=小灰灰Blog, password=123456)</span></span><br><span class="line"><span class="section"># case2</span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req4?password=123456</span><br><span class="line"><span class="section">## 输出: req4 userDO: DemoController.UserDO(user=null, password=123456)</span></span><br></pre></td></tr></table></figure><p> <span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #33F6FF">说明:</span></p><ul><li>定义一个bean，内部属性和请求参数对应</li><li>允许参数不存在的情况，会使用null代替（所以，尽量不要使用非封装基本类型，否则参数不传时，会抛异常）</li><li>bean的属性，可以根据实际情况指定类型</li></ul><h4 id="5-ModelAttribute注解方式"><a href="#5-ModelAttribute注解方式" class="headerlink" title="5. ModelAttribute注解方式"></a>5. ModelAttribute注解方式</h4><p>@ModelAttribute注解的方法，会优于Controller之前执行，一般更常见于向视图传输数据使用，此处不详细展开，正常来讲，专门的获取参数不太会用这这种方式来玩</p><h4 id="6-Path参数"><a href="#6-Path参数" class="headerlink" title="6. Path参数"></a>6. Path参数</h4><p>Path参数，专指的是请求路径的参数，如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/webs/demo/req4?password=123456</span><br><span class="line">上面这个url中，password是我们传统意义上的请求参数，其中path参数则是指其中 req4, demo这种path路径中的一环；对此，最常见的一个case就是常见的博客中,如开源中国的一个博客链接</span><br><span class="line"></span><br><span class="line">https://my.oschina.net/u/566591/blog/1601400</span><br><span class="line">566591 : 这个参数主要用来区分用户</span><br><span class="line">1601400 : 这个参数则主要是表示对应的博文</span><br><span class="line">一般path参数的获取方式如下</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"req6/&#123;user&#125;/info"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">req6</span><span class="params">(@PathVariable(name = <span class="string">"user"</span>)</span> String user) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"req6 user: "</span> + user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试case</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># case1 </span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req6/blog/info?user=haha</span><br><span class="line"><span class="section">## 输出：req6 user: blog</span></span><br><span class="line"></span><br><span class="line"><span class="section"># case2</span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req6/blog?user=haha</span><br><span class="line"><span class="section">## 输出: 404</span></span><br><span class="line"></span><br><span class="line"><span class="section"># case3</span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req6/info?user=haha</span><br><span class="line"><span class="section">## 输出: 404</span></span><br></pre></td></tr></table></figure><p> <span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #FF5733">注意:</span></p><ul><li>path参数的使用，需要确保参数存在且类型匹配</li><li>path参数和url参数不会相互影响</li></ul><h3 id="II-POST请求参数获取"><a href="#II-POST请求参数获取" class="headerlink" title="II. POST请求参数获取"></a>II. POST请求参数获取</h3><p>POST请求参数，更多的是看提交表单参数是否可以获取到，以及如何获取，主要的手段依然是上面几种方式，下面验证下是否ok</p><h4 id="1-HttpServletRequest方式获取参数"><a href="#1-HttpServletRequest方式获取参数" class="headerlink" title="1. HttpServletRequest方式获取参数"></a>1. HttpServletRequest方式获取参数</h4><p>测试case，可以借助curl来实现post请求</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># case1 </span></span><br><span class="line">curl -d "user=小灰灰Blog&amp;password=123456" "http://127.0.0.1:8080/webs/demo/req1"</span><br><span class="line"><span class="section">## 输出： req1 user: 小灰灰Blog pwd: 123456</span></span><br><span class="line"></span><br><span class="line"><span class="section"># case2</span></span><br><span class="line">curl -d "user=小灰灰Blog" "http://127.0.0.1:8080/webs/demo/req1?password=123456"</span><br><span class="line"><span class="section">## 输出：req1 user: 小灰灰Blog pwd: 12345</span></span><br><span class="line"></span><br><span class="line"><span class="section"># case3</span></span><br><span class="line">curl -d "user=小灰灰Blog" "http://127.0.0.1:8080/webs/demo/req1?user=greyBlog"</span><br><span class="line"><span class="section">## 输出：req1 user: greyBlog pwd: null</span></span><br></pre></td></tr></table></figure><p>curl也可以换成js请求测试方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">formData.append(<span class="string">"user"</span>, <span class="string">"小灰灰Blog"</span>);</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  url: <span class="string">'http://127.0.0.1:8080/webs/demo/req1?password=123456'</span>,</span><br><span class="line">  type: <span class="string">'post'</span>,</span><br><span class="line">  cache: <span class="literal">false</span>,</span><br><span class="line">  data: formData,</span><br><span class="line">  processData: <span class="literal">false</span>,</span><br><span class="line">  contentType: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> <span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #33F6FF">说明:</span></p><ul><li>对于HttpServletReuqest方式获取参数时，get和post没什么区别</li><li>若url参数和表单参数同名了，测试结果显示使用的是url参数（待确认，当然最好不要这么干）<h4 id="2-方法参数获取"><a href="#2-方法参数获取" class="headerlink" title="2. 方法参数获取"></a>2. 方法参数获取</h4>几个测试demo如下</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># case 1</span></span><br><span class="line">curl -d "user=小灰灰Blog&amp;password=123456" "http://127.0.0.1:8080/webs/demo/req2"</span><br><span class="line"><span class="section">## 输出： req2 user: 小灰灰Blog pwd: 123456</span></span><br><span class="line"></span><br><span class="line"><span class="section"># case 2</span></span><br><span class="line">curl -d "password=123456" "http://127.0.0.1:8080/webs/demo/req2"</span><br><span class="line"><span class="section">## 输出：req2 user: null pwd: 123456</span></span><br><span class="line"></span><br><span class="line"><span class="section"># case 3</span></span><br><span class="line">curl -d "password=123456" "http://127.0.0.1:8080/webs/demo/req2?user=blog"</span><br><span class="line"><span class="section">## 输出： req2 user: blog pwd: 123456</span></span><br><span class="line">基本上使用姿势和get没什么区别</span><br></pre></td></tr></table></figure><h4 id="3-RequestParam注解方式"><a href="#3-RequestParam注解方式" class="headerlink" title="3. RequestParam注解方式"></a>3. RequestParam注解方式</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># case 1</span></span><br><span class="line"><span class="string">curl</span> <span class="bullet">-d</span> <span class="string">"password=123456&amp;user=blog"</span> <span class="string">"http://127.0.0.1:8080/webs/demo/req3"</span></span><br><span class="line"><span class="comment">## 输出： req3 user: blog pwd: 123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># case 2</span></span><br><span class="line"><span class="string">curl</span> <span class="bullet">-d</span> <span class="string">"password=123456"</span> <span class="string">"http://127.0.0.1:8080/webs/demo/req3?user=blog"</span></span><br><span class="line"><span class="comment">## 输出： req3 user: blog pwd: 123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># case 3</span></span><br><span class="line"><span class="string">curl</span> <span class="bullet">-d</span> <span class="string">"password=123456&amp;user=blog"</span> <span class="string">"http://127.0.0.1:8080/webs/demo/req3?password=900"</span></span><br><span class="line"><span class="comment">## 输出：req3 user: blog pwd: 900,123456</span></span><br></pre></td></tr></table></figure><p> <span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #FF5733">注意:</span></p><ul><li>和前面的两种方式不同的是，当post表单的参数和url参数同名时，会合并成一个字符串<h4 id="4-Bean方式"><a href="#4-Bean方式" class="headerlink" title="4. Bean方式"></a>4. Bean方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## case1 </span></span><br><span class="line">curl -d "password=123456&amp;user=blog" "http://127.0.0.1:8080/webs/demo/req4?password=900"</span><br><span class="line"><span class="section">## 输出 req4 userDO: DemoController.UserDO(user=blog, password=900,123456)</span></span><br><span class="line"></span><br><span class="line"><span class="section">## case2</span></span><br><span class="line">curl -d "password=123456&amp;user=blog" "http://127.0.0.1:8080/webs/demo/req4"</span><br><span class="line"><span class="section">## 输出 req4 userDO: DemoController.UserDO(user=blog, password=123456)</span></span><br><span class="line"></span><br><span class="line"><span class="section">## case3</span></span><br><span class="line">curl -d "password=123456" "http://127.0.0.1:8080/webs/demo/req4"</span><br><span class="line"><span class="section">## 输出 req4 userDO: DemoController.UserDO(user=null, password=123456)</span></span><br><span class="line">这种方式不区分get,post，所以完全复杂的交互接口，完全可以考虑用bean的方式来定义请求参数</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-PathVariable"><a href="#5-PathVariable" class="headerlink" title="5. PathVariable"></a>5. PathVariable</h4><p>这个没法玩…</p><h2 id="III-多媒体上传参数获取"><a href="#III-多媒体上传参数获取" class="headerlink" title="III. 多媒体上传参数获取"></a>III. 多媒体上传参数获取</h2><p>上传文件的支持，对于传统的spring-mvc来说，可能需要一些添加一些相关配置，不在本文的范畴内，下面默认已经配置好</p><h4 id="1-实例支持"><a href="#1-实例支持" class="headerlink" title="1. 实例支持"></a>1. 实例支持</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = &#123;<span class="string">"wx/upload"</span>, <span class="string">"wx/wx/upload"</span>&#125;, method = &#123;RequestMethod.GET, RequestMethod.POST, RequestMethod.OPTIONS&#125;)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    MultipartFile file = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (request <span class="keyword">instanceof</span> MultipartHttpServletRequest) &#123;</span><br><span class="line">        file = ((MultipartHttpServletRequest) request).getFile(<span class="string">"image"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"图片不能为空!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来说，主要是利用HttpServletRequest来获取上传的文件</p><p> <span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #FF5733">注意:</span></p><ul><li>如果接口必须要求上传文件，可以直接把参数声明为 MultipartHttpServletRequest， 此时调用方如果不传参数，会被异常拦截（可以通过@ControllerAdvice来拦截全局异常）</li><li>如果可以不上传文件，则可以用上面的这种猥琐姿势，内部进行判断</li><li>((MultipartHttpServletRequest) request).getFile(xxx)来获取指定名的上传文件<h2 id="IV-小结"><a href="#IV-小结" class="headerlink" title="IV. 小结"></a>IV. 小结</h2><h4 id="1-五种获取参数的姿势"><a href="#1-五种获取参数的姿势" class="headerlink" title="1. 五种获取参数的姿势"></a>1. 五种获取参数的姿势</h4></li></ul><table><thead><tr><th align="left">方式</th><th align="left">注意事项</th></tr></thead><tbody><tr><td align="left">HttpServletRequest获取参数</td><td align="left">最常见通用</td></tr><tr><td align="left">方法参数与请求参数同名</td><td align="left">注意参数名统一，注意类型一致，尽量不用非包装基本类型</td></tr><tr><td align="left">@RequestParam注解</td><td align="left">同上，可注解内指定http参数名</td></tr><tr><td align="left">Bean方式</td><td align="left">定义一个bean，会将同名的http参数赋值进去，推荐</td></tr><tr><td align="left">@PathVariable 注解</td><td align="left">请求url参数</td></tr></tbody></table><h4 id="2-传文件使用姿势"><a href="#2-传文件使用姿势" class="headerlink" title="2. 传文件使用姿势"></a>2. 传文件使用姿势</h4><ul><li>使用MultipartHttpServletRequest来获取上传的文件，当然也可以获取基本的请求参数</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 注解 @RequestParam 的使用</title>
      <link href="/2019/05/14/requestparam-de-shi-yong/"/>
      <url>/2019/05/14/requestparam-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="RequestParam-参数加与不加的区别"><a href="#RequestParam-参数加与不加的区别" class="headerlink" title="@RequestParam 参数加与不加的区别"></a>@RequestParam 参数加与不加的区别</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(@RequestParam <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种写法参数为非必传，第二种写法参数为必传。参数名为userId。</p><p>第二种写法可以通过@RequestParam(required = false)设置为非必传。因为required值默认是true，所以默认必传。</p><p>第二种写法可以通过@RequestParam(“userId”)或者@RequestParam(value = “userId”)指定参数名。</p><p>第二种写法可以通过@RequestParam(defaultValue = “0”)指定参数默认值</p><blockquote><p>当@RequestParam(required = false) 或不加 @RequestParam时, 参数类型为int,该参数不传,会报错,因为如果不传,会把null 复制到int,会报错.   <strong>推荐使用包装类Integer</strong> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot  Value 注解注入static 字段</title>
      <link href="/2019/05/14/springboot-value-zhu-jie-zhu-ru-static-zi-duan/"/>
      <url>/2019/05/14/springboot-value-zhu-jie-zhu-ru-static-zi-duan/</url>
      
        <content type="html"><![CDATA[<h3 id="普通参数使用-Value-示例"><a href="#普通参数使用-Value-示例" class="headerlink" title="普通参数使用@Value 示例:"></a>普通参数使用@Value 示例:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String port;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="但是在注入static字段时-直接使用-Value-为静态变量赋值是不行的，可以使用-set-方法："><a href="#但是在注入static字段时-直接使用-Value-为静态变量赋值是不行的，可以使用-set-方法：" class="headerlink" title="但是在注入static字段时,直接使用 @Value 为静态变量赋值是不行的，可以使用 set 方法："></a>但是在注入static字段时,直接使用 @Value 为静态变量赋值是不行的，可以使用 set 方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test.host&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHost</span><span class="params">(String host)</span> </span>&#123;</span><br><span class="line">        Utils.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test.port&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(String port)</span> </span>&#123;</span><br><span class="line">        Utils.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，需要使用 @Component 注解。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ActiveMQ 入门</title>
      <link href="/2019/05/08/ActiveMQ_Introduction/"/>
      <url>/2019/05/08/ActiveMQ_Introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>MQ是消息中间件，是一种在分布式系统中应用程序借以传递消息的媒介，常用的有ActiveMQ，RabbitMQ，kafka。ActiveMQ是Apache下的开源项目，完全支持JMS1.1和J2EE1.4规范的JMS Provider实现。</p><a id="more"></a>  <h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ol><li><p>支持多种语言编写客户端 </p></li><li><p>对spring的支持，很容易和spring整合 </p></li><li><p>支持多种传输协议：TCP,SSL,NIO,UDP等 </p></li><li><p>支持AJAX </p><h4 id="消息形式："><a href="#消息形式：" class="headerlink" title="消息形式："></a>消息形式：</h4></li><li><p>点对点（queue） </p></li><li><p>一对多（topic）</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p><a href="https://blog.csdn.net/ytangdigl/article/details/77740100" target="_blank" rel="noopener">参考链接</a></p><ol><li>下载apache-activemq-5.13.1-bin.tar.gz <br><br>下载地址：<a href="http://download.csdn.net/download/u014223912/9464747" target="_blank" rel="noopener">http://download.csdn.net/download/u014223912/9464747</a></li></ol></blockquote><ol start="2"><li><p>下载后解压 </p></li><li><p>进入到/apache-activemq-5.13.1/bin/macosx目录 </p></li><li><p>启动ActiveMQ</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./activemq start</span><br></pre></td></tr></table></figure></li><li><p>在浏览器中 <a href="http://127.0.0.1:8161/admin/" target="_blank" rel="noopener">http://127.0.0.1:8161/admin/</a>   默认用户名密码都为admin</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/jiuqiyuliang/article/category/5617711" target="_blank" rel="noopener">https://blog.csdn.net/jiuqiyuliang/article/category/5617711</a></p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> ActiveMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 安装 Mysql</title>
      <link href="/2019/04/29/macInstallMysql/"/>
      <url>/2019/04/29/macInstallMysql/</url>
      
        <content type="html"><![CDATA[<p>### </p><p><a href="https://www.jianshu.com/p/4cb5ef29a099" target="_blank" rel="noopener">https://www.jianshu.com/p/4cb5ef29a099</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> brew </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git SSH 和 HTTP 的区别</title>
      <link href="/2019/04/24/git-ssh-he-http-de-qu-bie/"/>
      <url>/2019/04/24/git-ssh-he-http-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>最近项目迁移到git上去,在提交代码时遇到了要每次输入账号密码的情况,查看资料时了解到了 http 和ssh 的问题,特此记录.<br>百度了一下,大部分的回答如下:</p><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>使用 http url 克隆对初学者来说会比较方便，复制 http url 然后到命令行里面直接用 git clone 命令克隆到本地就好了，在执行 clone 命令之后需要输入你的 GitLab 的帐号和密码。使用 git Bash 每次都需要输入帐号和密码，不过在使用 PhpStorm 时，PhpStorm 会记住你的用户名和密码，只需第一次使用时输入就好。</p><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>使用 SSH url 克隆却需要在克隆之前先配置和添加好 SSH key ，因此，如果你想要使用 SSH url 克隆的话，你必须是这个项目的拥有者。否则你是无法添加 SSH key 的，另外 ssh 默认是每次 fetch 和 push 代码都不需要输入账号和密码。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sourceTree 每次提交代码都要输入账号密码</title>
      <link href="/2019/04/24/sourcetree-mei-ci-ti-jiao-dai-ma-du-yao-shu-ru-zhang-hao-mi-ma/"/>
      <url>/2019/04/24/sourcetree-mei-ci-ti-jiao-dai-ma-du-yao-shu-ru-zhang-hao-mi-ma/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h3><p> 使用ssh 方式做免密处理</p><!-- more --><p>如果必须使用http 的方式</p><h3 id="方法二-在-git目录中有个config目录，在路径前配置下用户名和密码即可，如下所示："><a href="#方法二-在-git目录中有个config目录，在路径前配置下用户名和密码即可，如下所示：" class="headerlink" title="方法二:在.git目录中有个config目录，在路径前配置下用户名和密码即可，如下所示："></a>方法二:在.git目录中有个config目录，在路径前配置下用户名和密码即可，如下所示：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">    repositoryformatversion = 0</span><br><span class="line">    filemode = false</span><br><span class="line">    bare = false</span><br><span class="line">    logallrefupdates = true</span><br><span class="line">    symlinks = false</span><br><span class="line">    ignorecase = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">    url = http://账号:&apos;密码&apos;@192.168.10.7:8090/test/Django.git</span><br><span class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">    remote = origin</span><br><span class="line">    merge = refs/heads/master</span><br></pre></td></tr></table></figure><h3 id="方法三-设置对所有项目有效"><a href="#方法三-设置对所有项目有效" class="headerlink" title="方法三:设置对所有项目有效"></a>方法三:设置对所有项目有效</h3><p>git config –global credential.helper osxkeychain  #第一次需要输入密码，以后都不需要了</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> sourceTree </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
