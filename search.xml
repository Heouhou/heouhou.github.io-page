<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Boot 数据库连接池的选择之Druid</title>
      <link href="/2019/07/12/Database-connection-pool-druid/"/>
      <url>/2019/07/12/Database-connection-pool-druid/</url>
      
        <content type="html"><![CDATA[<h3 id="spring-boot-整合-durid-mysql-Mybatis-pagehelper"><a href="#spring-boot-整合-durid-mysql-Mybatis-pagehelper" class="headerlink" title="spring boot 整合 durid + mysql +Mybatis +pagehelper"></a>spring boot 整合 durid + mysql +Mybatis +pagehelper</h3><h4 id="1-pom文件"><a href="#1-pom文件" class="headerlink" title="1.pom文件"></a>1.pom文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--移除spring boot框架中默认logback依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--pagehelper--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql, 使用5版本, 8版本太高--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#jdbc配置</span><br><span class="line">spring.datasource.druid.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.druid.url=jdbc:mysql://139.199.203.84:3306/jscourt_miniapp?useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true&amp;allowMultiQueries=true</span><br><span class="line">spring.datasource.druid.username=weifayuan</span><br><span class="line">spring.datasource.druid.password=bmS!wfy2018_test</span><br><span class="line">spring.datasource.druid.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line"></span><br><span class="line">#连接池的设置</span><br><span class="line">#初始化时建立物理连接的个数</span><br><span class="line">spring.datasource.druid.initial-size=5</span><br><span class="line">#最小连接池数量</span><br><span class="line">spring.datasource.druid.min-idle=5</span><br><span class="line">#最大连接池数量 maxIdle已经不再使用</span><br><span class="line">spring.datasource.druid.max-active=20</span><br><span class="line">#获取连接时最大等待时间，单位毫秒</span><br><span class="line">spring.datasource.druid.max-wait=60000</span><br><span class="line">#申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span><br><span class="line">spring.datasource.druid.test-while-idle=true</span><br><span class="line">#既作为检测的间隔时间又作为testWhileIdel执行的依据</span><br><span class="line">spring.datasource.druid.time-between-eviction-runs-millis=60000</span><br><span class="line">#销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接</span><br><span class="line">spring.datasource.druid.min-evictable-idle-time-millis=30000</span><br><span class="line">#用来检测连接是否有效的sql 必须是一个查询语句</span><br><span class="line">#mysql中为 select &apos;x&apos;</span><br><span class="line">#oracle中为 select 1 from dual</span><br><span class="line">spring.datasource.druid.validation-query=select &apos;x&apos;</span><br><span class="line">#申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span><br><span class="line">spring.datasource.druid.test-on-borrow=false</span><br><span class="line">#归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span><br><span class="line">spring.datasource.druid.test-on-return=false</span><br><span class="line">#当数据库抛出不可恢复的异常时,抛弃该连接</span><br><span class="line">#spring.datasource.druid.exception-sorter=true</span><br><span class="line">#是否缓存preparedStatement,mysql5.5+建议开启</span><br><span class="line">spring.datasource.druid.pool-prepared-statements=false</span><br><span class="line">#当值大于0时poolPreparedStatements会自动修改为true</span><br><span class="line">spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20</span><br><span class="line">#配置扩展插件</span><br><span class="line">spring.datasource.druid.filters=stat,wall</span><br><span class="line">#通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br><span class="line">spring.datasource.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br><span class="line">#合并多个DruidDataSource的监控数据</span><br><span class="line">spring.datasource.druid.use-global-data-source-stat=true</span><br><span class="line">#设置访问druid监控页的账号和密码,默认没有</span><br><span class="line">spring.datasource.druid.stat-view-servlet.enabled=true</span><br><span class="line">spring.datasource.druid.stat-view-servlet.login-username=admin</span><br><span class="line">spring.datasource.druid.stat-view-servlet.login-password=admin</span><br><span class="line">#spring.datasource.druid.stat-view-servlet.url-pattern=/*</span><br><span class="line">spring.datasource.druid.stat-view-servlet.reset-enable=false</span><br><span class="line">spring.datasource.druid.web-stat-filter.url-pattern=/*</span><br><span class="line">spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</span><br><span class="line">spring.datasource.druid.web-stat-filter.enabled=true</span><br></pre></td></tr></table></figure><blockquote><p>由于使用  <strong>druid-spring-boot-starter</strong>所以可以不用再写java 配置类  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.druid"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidDataSourceProperty</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据库配置</span></span><br><span class="line">  <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String driverClassName;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  ....省略其他参数</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidDataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> DruidDataSourceProperty druidDataSourceProperty;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DruidDataSource datasource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    datasource.setUrl(druidDataSourceProperty.getUrl());</span><br><span class="line">    datasource.setUsername(druidDataSourceProperty.getUsername());</span><br><span class="line">    datasource.setPassword(druidDataSourceProperty.getPassword());</span><br><span class="line">    datasource.setDriverClassName(druidDataSourceProperty.getDriverClassName());</span><br><span class="line">    datasource.setInitialSize(druidDataSourceProperty.getInitialSize());</span><br><span class="line">    datasource.setMinIdle(druidDataSourceProperty.getMinIdle());</span><br><span class="line">    datasource.setMaxActive(druidDataSourceProperty.getMaxActive());</span><br><span class="line">    <span class="comment">// 配置获取连接等待超时的时间</span></span><br><span class="line">    datasource.setMaxWait(druidDataSourceProperty.getMaxWait());</span><br><span class="line">    <span class="comment">// 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">    datasource.setTimeBetweenEvictionRunsMillis(</span><br><span class="line">        druidDataSourceProperty.getTimeBetweenEvictionRunsMillis());</span><br><span class="line">    <span class="comment">// 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">    datasource</span><br><span class="line">        .setMinEvictableIdleTimeMillis(druidDataSourceProperty.getMinEvictableIdleTimeMillis());</span><br><span class="line">    datasource.setValidationQuery(druidDataSourceProperty.getValidationQuery());</span><br><span class="line">    datasource.setTestWhileIdle(druidDataSourceProperty.isTestWhileIdle());</span><br><span class="line">    datasource.setTestOnBorrow(druidDataSourceProperty.isTestOnBorrow());</span><br><span class="line">    datasource.setTestOnReturn(druidDataSourceProperty.isTestOnReturn());</span><br><span class="line">    datasource.setPoolPreparedStatements(druidDataSourceProperty.isPoolPreparedStatements());</span><br><span class="line">    datasource.setUseGlobalDataSourceStat(druidDataSourceProperty.isUseGlobalDataSourceStat());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      datasource.setFilters(druidDataSourceProperty.getFilters());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">      log.error(<span class="string">"druid configuration initialization filter"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    datasource.setConnectionProperties(druidDataSourceProperty.getConnectionProperties());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> datasource;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 监控显示的servlet,定义Servlet，用于Druid控制台的查看</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">druidServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"init Druid Servlet Configuration "</span>);</span><br><span class="line">    ServletRegistrationBean servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean();</span><br><span class="line">    servletRegistrationBean.setServlet(<span class="keyword">new</span> StatViewServlet());</span><br><span class="line">    servletRegistrationBean.addUrlMappings(<span class="string">"/druid/*"</span>);</span><br><span class="line">    Map&lt;String, String&gt; initParameters = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    initParameters.put(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>); <span class="comment">// 用户名</span></span><br><span class="line">    initParameters.put(<span class="string">"loginPassword"</span>, <span class="string">"admin"</span>); <span class="comment">// 密码</span></span><br><span class="line">    initParameters.put(<span class="string">"resetEnable"</span>, <span class="string">"false"</span>); <span class="comment">// 禁用HTML页面上的“Reset All”功能</span></span><br><span class="line">    initParameters.put(<span class="string">"allow"</span>, <span class="string">""</span>); <span class="comment">// IP白名单 (没有配置或者为空，则允许所有访问)</span></span><br><span class="line">    <span class="comment">// initParameters.put("deny", "192.168.20.38");// IP黑名单 (存在共同时，deny优先于allow)</span></span><br><span class="line">    servletRegistrationBean.setInitParameters(initParameters);</span><br><span class="line">    <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 定义Filter，忽略静态资源的拦截</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    filterRegistrationBean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">    filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">    filterRegistrationBean.addInitParameter(<span class="string">"exclusions"</span>,</span><br><span class="line">        <span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span>);</span><br><span class="line">    <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="3-Mybatis"><a href="#3-Mybatis" class="headerlink" title="3. Mybatis"></a>3. Mybatis</h4><p>在 启动类上加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.houqx.test.mapper"</span>)</span><br></pre></td></tr></table></figure><p>这样就不用再Mapper 上添加 @Mapper 注解了</p><p>添加配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#mybatis 日志级别</span><br><span class="line">logging.level.com.houqx.test.mapper:debug</span><br><span class="line">#mybatis 包扫描</span><br><span class="line">mybatis.type-aliases-package=com.houqx.test.domain</span><br><span class="line">mybatis.configuration.call-setters-on-nulls=true</span><br><span class="line">mybatis.mapper-locations=classpath:/mybatis/**.xml</span><br><span class="line">pagehelper.helperDialect=mysql</span><br><span class="line">pagehelper.params=count=countSql</span><br><span class="line">pagehelper.reasonable=true</span><br><span class="line">pagehelper.supportMethodsArguments=true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
          <category> druid </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 数据源 </tag>
            
            <tag> druid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 快捷键</title>
      <link href="/2019/07/08/idea-kuai-jie-jian/"/>
      <url>/2019/07/08/idea-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="control"><a href="#control" class="headerlink" title="control"></a>control</h3><p>control +, 补全代码</p><p>Control + H 显示当前类的层次结构</p><h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><p>Command + O 查找类文件</p><p>Command + L 在当前文件跳转到某一行的指定处</p><p>Command + E 显示最近打开的 文件记录 列表</p><p>Command + Y 快速打开光标所在方法、类的定义</p><p>Command + P 显示方法的参数信息</p><p>Command + 鼠标放在代码上 显示代码简要信息</p><p>Command + W 关闭活动的编辑器选项卡</p><p>Command + J 插入自定义动态代码模板</p><p>Command + / 注释/取消注释与行注释</p><p>Command + U 前往当前光标所在方法的父类的方法 / 接口定义</p><p>Command + F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</p><h3 id="Command-shift"><a href="#Command-shift" class="headerlink" title="Command+shift"></a>Command+shift</h3><p>Command + Shift + O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</p><p>Command + Shift + Delete 跳转到最后一个编辑的地方</p><h3 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h3><p>Option + 方向键左 / Option + 方向键右 光标跳转到当前单词 / 中文句的左 / 右侧开头位置</p><h3 id="Command-Option"><a href="#Command-Option" class="headerlink" title="Command + Option"></a>Command + Option</h3><p>Command + Option + 方向键左 / Command + Option + 方向键右 退回 / 前进到上一个操作的地方</p><p>Command + Option + O 前往指定的变量 / 方法</p><p>Command + Option + T 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）</p><p>Command + Option + J 弹出模板选择窗口，将选定的代码使用动态模板包住</p><p>Command + Option + N 根据接口查看方法</p><p>Command + Option + M 将选中的代码提取为方法</p><p>Command + Option + V 提取变量</p><p>Command + Option + F 提取字段</p><p>Command + Option + C 提取常量</p><p>Command + Option + P 提取参数</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Control + Shift + B 跳转到类型声明处</p><p>Control + Option + H 显示调用层次结构</p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下常用Redis命令</title>
      <link href="/2019/06/04/linux-redis/"/>
      <url>/2019/06/04/linux-redis/</url>
      
        <content type="html"><![CDATA[<h2 id="1-连接redis"><a href="#1-连接redis" class="headerlink" title="1. 连接redis"></a>1. 连接redis</h2><p> redis-cli -h host -p port -a password</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h r-bp1e481.redis.rds.aliyuncs.com  -p 6379 -a password</span><br></pre></td></tr></table></figure><p>有时候会有中文乱码。<br>要在 redis-cli 后面加上 –raw</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --raw</span><br></pre></td></tr></table></figure><p>就可以避免中文乱码了</p><h2 id="2-退出"><a href="#2-退出" class="headerlink" title="2. 退出"></a>2. 退出</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QUIT</span><br></pre></td></tr></table></figure><h2 id="3-删除所有数据"><a href="#3-删除所有数据" class="headerlink" title="3.删除所有数据"></a>3.删除所有数据</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flushDB</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LINUX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LINUX </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下常用FTP命令</title>
      <link href="/2019/06/04/linux-ftp/"/>
      <url>/2019/06/04/linux-ftp/</url>
      
        <content type="html"><![CDATA[<h2 id="1-连接Ftp"><a href="#1-连接Ftp" class="headerlink" title="1.连接Ftp"></a>1.连接Ftp</h2><p>ftp 地址 端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp 222.190.111.146 19001</span><br></pre></td></tr></table></figure><p>然后输入账号<br>输入密码</p><h2 id="2-退出"><a href="#2-退出" class="headerlink" title="2. 退出"></a>2. 退出</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bye</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LINUX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FTP </tag>
            
            <tag> LINUX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8新特性  Lambda</title>
      <link href="/2019/05/23/java8-lambda/"/>
      <url>/2019/05/23/java8-lambda/</url>
      
        <content type="html"><![CDATA[<p>Lambda 的使用</p><a id="more"></a><h3 id="Lambda-表达式的示例"><a href="#Lambda-表达式的示例" class="headerlink" title="Lambda 表达式的示例:"></a>Lambda 表达式的示例:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.domain.Employee;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.service.Impl.FilterEmployeesByAge;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.service.Impl.FilterEmployeesBySalary;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.service.MyPredicate;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> houqingxin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-05-23 10:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//原来的匿名内部类</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(o2, o1);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    TreeSet&lt;Integer&gt; integers = <span class="keyword">new</span> TreeSet&lt;&gt;(comparator);</span><br><span class="line">    integers.add(<span class="number">1</span>);</span><br><span class="line">    integers.add(<span class="number">3</span>);</span><br><span class="line">    integers.add(<span class="number">2</span>);</span><br><span class="line">    System.out.println(integers);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Lambda</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Comparator&lt;Integer&gt; comparator = (x, y) -&gt; Integer.compare(y, x);</span><br><span class="line">    TreeSet&lt;Integer&gt; integers = <span class="keyword">new</span> TreeSet&lt;&gt;(comparator);</span><br><span class="line">    integers.add(<span class="number">1</span>);</span><br><span class="line">    integers.add(<span class="number">3</span>);</span><br><span class="line">    integers.add(<span class="number">2</span>);</span><br><span class="line">    System.out.println(integers);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//需求: 获取年龄大于35的员工信息</span></span><br><span class="line">  List&lt;Employee&gt; employees = Arrays.asList(</span><br><span class="line">      <span class="keyword">new</span> Employee(<span class="string">"张三"</span>, <span class="number">18</span>, <span class="number">1999</span>),</span><br><span class="line">      <span class="keyword">new</span> Employee(<span class="string">"李四"</span>, <span class="number">28</span>, <span class="number">2999</span>),</span><br><span class="line">      <span class="keyword">new</span> Employee(<span class="string">"王五"</span>, <span class="number">38</span>, <span class="number">3999</span>),</span><br><span class="line">      <span class="keyword">new</span> Employee(<span class="string">"赵六"</span>, <span class="number">48</span>, <span class="number">4999</span>)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">filterEmployeesByAge</span><span class="params">(List&lt;Employee&gt; employees)</span> </span>&#123;</span><br><span class="line">    List&lt;Employee&gt; resultEmployees = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">      <span class="keyword">if</span> (employee.getAge() &gt; <span class="number">35</span>) &#123;</span><br><span class="line">        resultEmployees.add(employee);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultEmployees;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Employee&gt; employee = filterEmployeesByAge(employees);</span><br><span class="line">    System.out.println(employee);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//需求: 获取工资大于3000的员工信息</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">filterEmployeesBySalary</span><span class="params">(List&lt;Employee&gt; employees)</span> </span>&#123;</span><br><span class="line">    List&lt;Employee&gt; resultEmployees = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">      <span class="keyword">if</span> (employee.getSalary() &gt; <span class="number">3000</span>) &#123;</span><br><span class="line">        resultEmployees.add(employee);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultEmployees;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Employee&gt; employee = filterEmployeesBySalary(employees);</span><br><span class="line">    System.out.println(employee);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//优化方式一 : 策略设计模式</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">filterEmployees</span><span class="params">(List&lt;Employee&gt; employees,</span></span></span><br><span class="line"><span class="function"><span class="params">      MyPredicate&lt;Employee&gt; myPredicate)</span> </span>&#123;</span><br><span class="line">    List&lt;Employee&gt; resultEmployees = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">      <span class="keyword">if</span> (myPredicate.test(employee)) &#123;</span><br><span class="line">        resultEmployees.add(employee);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultEmployees;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Employee&gt; employee = filterEmployees(employees, <span class="keyword">new</span> FilterEmployeesByAge());</span><br><span class="line">    System.out.println(employee);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Employee&gt; employee2 = filterEmployees(employees, <span class="keyword">new</span> FilterEmployeesBySalary());</span><br><span class="line">    System.out.println(employee2);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//优化方式二: 匿名内部类</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Employee&gt; employees = filterEmployees(<span class="keyword">this</span>.employees, <span class="keyword">new</span> MyPredicate&lt;Employee&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> Boolean <span class="title">test</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> employee.getSalary() &lt; <span class="number">2000</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">    System.out.println(employees);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//优化方式三:匿名内部类</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Employee&gt; employees = filterEmployees(<span class="keyword">this</span>.employees, (x) -&gt; x.getSalary() &lt; <span class="number">2000</span>);</span><br><span class="line">    System.out.println(employees);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//优化方式四:Stream API</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    employees.stream()</span><br><span class="line">        .filter((x) -&gt; x.getSalary() &lt; <span class="number">2000</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实体对象</span></span><br><span class="line"><span class="keyword">package</span> com.example.demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> houqingxin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-05-22 14:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> houqingxin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-05-23 11:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyPredicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">Boolean <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.demo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.domain.Employee;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.service.MyPredicate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> houqingxin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-05-23 11:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterEmployeesByAge</span> <span class="keyword">implements</span> <span class="title">MyPredicate</span>&lt;<span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Boolean <span class="title">test</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> employee.getAge() &gt; <span class="number">35</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现方法</span></span><br><span class="line"><span class="keyword">package</span> com.example.demo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.domain.Employee;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.service.MyPredicate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> houqingxin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-05-23 11:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterEmployeesByAge</span> <span class="keyword">implements</span> <span class="title">MyPredicate</span>&lt;<span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Boolean <span class="title">test</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> employee.getAge() &gt; <span class="number">35</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.demo.service.impl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> com.example.demo.domain.Employee;</span><br><span class="line">    <span class="keyword">import</span> com.example.demo.service.MyPredicate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> houqingxin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-05-23 11:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterEmployeesBySalary</span> <span class="keyword">implements</span> <span class="title">MyPredicate</span>&lt;<span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Boolean <span class="title">test</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> employee.getSalary() &lt; <span class="number">3500</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda-表达式的基本语法"><a href="#Lambda-表达式的基本语法" class="headerlink" title="Lambda 表达式的基本语法"></a>Lambda 表达式的基本语法</h3><pre><code>java8中引用了一个新的操作符&quot;-&gt;&quot; 该操作符称为箭头操作符 或Lambda操作符箭头操作符将Lambda表达式拆分成两部分:左侧: Lambda 表达式的参数列表右侧: Lambda 表达式中所需执行的功能,即Lambda 体</code></pre><h4 id="1-语法格式一-无参-无返回值"><a href="#1-语法格式一-无参-无返回值" class="headerlink" title="1. 语法格式一: 无参,无返回值"></a>1. 语法格式一: 无参,无返回值</h4><pre><code>()-&gt;System.out.println(&quot;Hello Lambda&quot;);</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Runnable runnable = () -&gt; System.out.println(<span class="string">"Hello Lambda!"</span>);</span><br><span class="line">  runnable.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-语法格式二-有一个参数-无返回值-若只有一个参数-小括号可省略不写"><a href="#2-语法格式二-有一个参数-无返回值-若只有一个参数-小括号可省略不写" class="headerlink" title="2. 语法格式二: 有一个参数 ,无返回值 (若只有一个参数,小括号可省略不写)"></a>2. 语法格式二: 有一个参数 ,无返回值 (若只有一个参数,小括号可省略不写)</h4><pre><code>(x)-&gt;System.out.println(x);x-&gt;System.out.println(x);</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Consumer&lt;String&gt; consumer = x -&gt; System.out.println(x);</span><br><span class="line">    consumer.accept(<span class="string">"测试"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-语法格式三-有两个以上参数-有返回值-并且Lambda体中有多条语句"><a href="#3-语法格式三-有两个以上参数-有返回值-并且Lambda体中有多条语句" class="headerlink" title="3. 语法格式三: 有两个以上参数,有返回值,并且Lambda体中有多条语句"></a>3. 语法格式三: 有两个以上参数,有返回值,并且Lambda体中有多条语句</h4><pre><code>Comparator&lt;Integer&gt; comparator = (x, y) -&gt; {  System.out.println(&quot;--------&quot;);  return Integer.compare(x, y);};</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Comparator&lt;Integer&gt; comparator = (x, y) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">"--------"</span>);</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">int</span> result = comparator.compare(<span class="number">17</span>, <span class="number">11</span>);</span><br><span class="line">  System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-语法格式四-若Lambda-体中只有一条语句-return-和大括号都可以不写"><a href="#4-语法格式四-若Lambda-体中只有一条语句-return-和大括号都可以不写" class="headerlink" title="4.语法格式四: 若Lambda 体中只有一条语句,return 和大括号都可以不写"></a>4.语法格式四: 若Lambda 体中只有一条语句,return 和大括号都可以不写</h4><pre><code>Comparator&lt;Integer&gt; comparator = (x, y) -&gt;Integer.compare(x, y);</code></pre><h4 id="5-语法格式五-Lamba-表达式的参数列表的数据类型可以省略不写-因为JVM编译器通过上下文推断出-数据类型-即”类型推断”"><a href="#5-语法格式五-Lamba-表达式的参数列表的数据类型可以省略不写-因为JVM编译器通过上下文推断出-数据类型-即”类型推断”" class="headerlink" title="5. 语法格式五:  Lamba 表达式的参数列表的数据类型可以省略不写,因为JVM编译器通过上下文推断出,数据类型,即”类型推断”."></a>5. 语法格式五:  Lamba 表达式的参数列表的数据类型可以省略不写,因为JVM编译器通过上下文推断出,数据类型,即”类型推断”.</h4><h3 id="Java8-内置四大核心函数式接口"><a href="#Java8-内置四大核心函数式接口" class="headerlink" title="Java8 内置四大核心函数式接口"></a>Java8 内置四大核心函数式接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Java8内置的四大核心函数式接口</span></span><br><span class="line"><span class="comment">  * &lt;p&gt;</span></span><br><span class="line"><span class="comment">  * Consumer&lt;T&gt;: 消费型接口</span></span><br><span class="line"><span class="comment">  * void accept(T t);</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * Supplier&lt;T&gt;:供给型接口</span></span><br><span class="line"><span class="comment">  * T get();</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * Function&lt;T, R&gt;: 函数型接口</span></span><br><span class="line"><span class="comment">  * R apply(T t);</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * Predicate&lt;T&gt;: 断言型接口:</span></span><br><span class="line"><span class="comment">  * boolean test(T t);</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *Java8中还提供了其他函数式接口</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用:"></a>方法引用:</h3><p> 若Lambda 体中的内容有方法已经实现了,我们可以使用”方法引用”<br>    (可以理解为方法引用是Lambda 表达式的另外一种表现形式)<br>    主要有三种语法格式:</p><blockquote><p>注意:Lambda 体中调用方法的参数列表和返回值类型,要与函数式接口中抽象方法的函数列表和返回值类型保持一致</p></blockquote><pre><code>①对象::实例方法名</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  PrintStream out = System.out;</span><br><span class="line">  Consumer&lt;String&gt; consumer = x -&gt; out.println(x);</span><br><span class="line">  Consumer&lt;String&gt; consumer1 = out::println;</span><br><span class="line">  consumer.accept(<span class="string">"测试1"</span>);</span><br><span class="line">  consumer1.accept(<span class="string">"测试2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">  employee.setName(<span class="string">"hah"</span>);</span><br><span class="line">  Supplier&lt;String&gt; stringSupplier = () -&gt; employee.getName();</span><br><span class="line">  String s = stringSupplier.get();</span><br><span class="line">  System.out.println(s);</span><br><span class="line">  Supplier&lt;String&gt; getName = employee::getName;</span><br><span class="line">  String s1 = getName.get();</span><br><span class="line">  System.out.println(s1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>②类::静态方法名</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Comparator&lt;Integer&gt; comparator = (x, y) -&gt; Integer.compare(x, y);</span><br><span class="line">  Comparator&lt;Integer&gt; comparator1 = Integer::compare;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>③类::实例方法名若 Lambda 参数列表中的第一参数是实例方法的调用者,而第二个参数是实例方法的参数时,可以使用ClassName::method</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   BiPredicate&lt;String, String&gt; biPredicate = (x, y) -&gt; x.equals(y);</span><br><span class="line">   BiPredicate&lt;String, String&gt; biPredicate1 = String::equals;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><pre><code>格式:ClassName::new</code></pre><blockquote><p>注意:<br>需要调用的构造器的参数列表要与函数式接口中的抽象方法参数列表保持一致</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Supplier&lt;Employee&gt; stringSupplier = () -&gt; <span class="keyword">new</span> Employee();</span><br><span class="line">  Supplier&lt;Employee&gt; stringSupplier2 = Employee::<span class="keyword">new</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Function&lt;Integer, Employee&gt; function = (x) -&gt; <span class="keyword">new</span> Employee(x);</span><br><span class="line">  Function&lt;Integer, Employee&gt; function1 = Employee::<span class="keyword">new</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组引用"><a href="#数组引用" class="headerlink" title="数组引用"></a>数组引用</h3><pre><code>Type[]::new</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Function&lt;Integer, String[]&gt; function = (x) -&gt; <span class="keyword">new</span> String[x];</span><br><span class="line">   Function&lt;Integer, String[]&gt; function1 = String[]::<span class="keyword">new</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目搭建 :使用Swagger2构建强大的RESTful API文档</title>
      <link href="/2019/05/16/springboot-swagger2/"/>
      <url>/2019/05/16/springboot-swagger2/</url>
      
        <content type="html"><![CDATA[<h3 id="1-添加Swagger2依赖"><a href="#1-添加Swagger2依赖" class="headerlink" title="1. 添加Swagger2依赖"></a>1. 添加Swagger2依赖</h3><p> 在pom.xml中加入Swagger2的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建Swagger2配置类"><a href="#2-创建Swagger2配置类" class="headerlink" title="2. 创建Swagger2配置类"></a>2. 创建Swagger2配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value</span>(value = <span class="string">"$&#123;swagger.enabled&#125;"</span>)</span><br><span class="line">  Boolean swaggerEnabled;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">/* ParameterBuilder tokenParam = new ParameterBuilder();</span></span><br><span class="line"><span class="comment">    List&lt;Parameter&gt; params = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">    tokenParam.name("Authorization").description("令牌Token").modelRef(new ModelRef("string"))</span></span><br><span class="line"><span class="comment">        .parameterType("header").required(false).build();</span></span><br><span class="line"><span class="comment">    params.add(tokenParam.build());*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">        .groupName(<span class="string">"v1.0"</span>)</span><br><span class="line">        .apiInfo(apiInfo())</span><br><span class="line">        .enable(swaggerEnabled)</span><br><span class="line">        .select()</span><br><span class="line">        .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.example.demo"</span>))</span><br><span class="line">        .paths(PathSelectors.any())</span><br><span class="line">        .build()</span><br><span class="line">        .pathMapping(<span class="string">""</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">        .title(<span class="string">"SpringBootDemo-API"</span>)</span><br><span class="line">        .description(<span class="string">"SpringBoot项目搭建"</span>)</span><br><span class="line">        .contact(<span class="keyword">new</span> Contact(<span class="string">"hou"</span>, <span class="string">"www.buhaoji.top"</span>, <span class="string">"843882065@qq.com"</span>))</span><br><span class="line">        .version(<span class="string">"1.0.0"</span>)</span><br><span class="line">        .build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码所示，通过@Configuration注解，让Spring来加载该类配置。再通过@EnableSwagger2注解来启用Swagger2。<br><br>再通过createRestApi函数创建Docket的Bean之后，apiInfo()用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。select()函数返回一个ApiSelectorBuilder实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被@ApiIgnore指定的请求）。</p><h3 id="3-添加文档内容"><a href="#3-添加文档内容" class="headerlink" title="3. 添加文档内容"></a>3. 添加文档内容</h3><p>在完成了上述配置后，其实已经可以生产文档内容，但是这样的文档主要针对请求本身，而描述主要来源于函数等命名产生，对用户并不友好，我们通常需要自己增加一些说明来丰富文档内容。如下所示，我们通过@ApiOperation注解来给API增加说明、通过@ApiImplicitParams、@ApiImplicitParam注解来给参数增加说明。</p><p>//TODO</p><h3 id="4-swagger-相关注解"><a href="#4-swagger-相关注解" class="headerlink" title="4.swagger 相关注解"></a>4.swagger 相关注解</h3><h3 id="5-swagger-分组"><a href="#5-swagger-分组" class="headerlink" title="5.swagger 分组"></a>5.swagger 分组</h3>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC之请求参数的获取方式</title>
      <link href="/2019/05/15/springmvc-request/"/>
      <url>/2019/05/15/springmvc-request/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.hhui.top/hexblog/2018/01/04/SpringMVC%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E8%8E%B7%E5%8F%96%E6%96%B9%E5%BC%8F/#top" target="_blank" rel="noopener">原文链接</a></p><h3 id="I-GET请求参数获取"><a href="#I-GET请求参数获取" class="headerlink" title="I. GET请求参数获取"></a>I. GET请求参数获取</h3><p>get请求参数，一般都是直接挂在请求的url上，所以获取这些参数还是比较简单的</p><h4 id="1-通过-HttpServletRequest获取参数"><a href="#1-通过-HttpServletRequest获取参数" class="headerlink" title="1. 通过 HttpServletRequest获取参数"></a>1. 通过 HttpServletRequest获取参数</h4><p>这个可以说是最基本最常见的的方式了，  <span style="text-shadow: 5px 5px 5px #00FF00;">javax.servlet.ServletRequest#getParameter</span>来获取对应的参数 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"webs/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"req1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">req1</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String user = request.getParameter(<span class="string">"user"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"req1 user: "</span> + user + <span class="string">" pwd: "</span> + password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">根据上面暴露的接口，我们测试的case就很简单了</span><br><span class="line">http://127.0.0.1:8080/webs/demo/req1?user=小灰灰Blog&amp;password=123456</span><br><span class="line"><span class="section">## 输出  req1 user: 小灰灰Blog pwd: 123456</span></span><br><span class="line"></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req1?user=小灰灰Blog</span><br><span class="line"><span class="section">## 输出  req1 user: 小灰灰Blog pwd: null</span></span><br></pre></td></tr></table></figure><p> <span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #33F6FF">说明:</span></p><ul><li>这是一个最基本的获取参数的方式，get，post请求都适用的，通常在filter,intercepter中也是可以通过HttpServletRequest对象来获取请求参数</li><li>除了获取常见的请求参数之外，HttpServletRequest可以获取请求头的完整信息</li><li>在一次请求的生命周期内，可以通过下面的方式获取Request对象(当然也可以获取response对象)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest httpServletRequest = ((ServletRequestAttributes) </span><br><span class="line">    RequestContextHolder.getRequestAttributes()).getRequest();</span><br></pre></td></tr></table></figure><h4 id="2-直接方法参数获取"><a href="#2-直接方法参数获取" class="headerlink" title="2. 直接方法参数获取"></a>2. 直接方法参数获取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"req2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">req2</span><span class="params">(String user, String password)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"req2 user: "</span> + user + <span class="string">" pwd: "</span> + password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">请求验证</span><br><span class="line">http://127.0.0.1:8080/webs/demo/req2?user=%E5%B0%8F%E7%81%B0%E7%81%B0Blog&amp;password=123456</span><br><span class="line"><span class="section">## 输出： req2 user: 小灰灰Blog pwd: 123456</span></span><br><span class="line"></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req2?password=123456</span><br><span class="line"><span class="section">## 输出： req2 user: null pwd: 123456</span></span><br><span class="line"></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req2?password=123456&amp;User=blog</span><br><span class="line"><span class="section">## 输出： req2 user: null pwd: 123456</span></span><br></pre></td></tr></table></figure><p> <span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #FF5733">注意:</span></p><ul><li>上面这种使用方式，相当于直接将url参数映射到了Controller方法的参数上了</li><li>方法参数名必须和url参数名完全一致（区分大小写）</li><li>顺序无关</li><li>若参数没传，则默认为null</li></ul><blockquote><p>一个疑问 <br><br>上面的demo中Controller的方法参数都是String还好，如果将password改成int，会出现什么情况<br></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"req2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">req2</span><span class="params">(String user, <span class="keyword">int</span> password)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"req2 user: "</span> + user + <span class="string">" pwd: "</span> + password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际测试</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># case1 </span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req2?password=123456&amp;user=blog</span><br><span class="line"><span class="section">## 输出： req2 user: blog pwd: 123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section"># case 2</span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req2?password2=123456&amp;user=blog</span><br><span class="line"><span class="section">## 输出: 报错, Optional int parameter 'password' is present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section"># case 3</span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req2?password=abc&amp;user=blog</span><br><span class="line"><span class="section">## 输出：报错, "Failed to convert value of type 'java.lang.String' to required type 'int'; nested exception is java.lang.NumberFormatException: For input string: "abc""</span></span><br></pre></td></tr></table></figure><p><span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #33F6FF">说明:</span></p><ul><li>如果请求参数与方法参数类型不一致，会抛出转换异常</li><li>如果方法参数为非封装基本类型，则url参数必须存在，否则报错</li></ul><h4 id="3-RequestParam注解方式获取请求参数"><a href="#3-RequestParam注解方式获取请求参数" class="headerlink" title="3. RequestParam注解方式获取请求参数"></a>3. RequestParam注解方式获取请求参数</h4><p>通过@RequestParam注解获取参数的方式和上面的一种比较类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"req3"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">req3</span><span class="params">(@RequestParam(<span class="string">"user"</span>)</span> String username,</span></span><br><span class="line"><span class="function">                   @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String pwd) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"req3 user: "</span> + username + <span class="string">" pwd: "</span> + pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># case1 </span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req3?password=123456&amp;user=blog</span><br><span class="line"><span class="section">## 输出: req3 user: blog pwd: 123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section"># case2</span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req3?password=123456</span><br><span class="line"><span class="section">## 输出：报错， Required String parameter 'user' is not presen</span></span><br></pre></td></tr></table></figure><p><span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #33F6FF">说明:</span></p><ul><li>不指定注解的name或value属性时，等同于第二种使用姿势</li><li>注解的name属性或value属性，用实际的参数名来指定</li><li>controller的参数名与url参数名没有强关联（区别第二种方式）</li><li>参数类型需要保证一致（通第二种方式）</li><li>如果url参数可选，请设置require属性为false，如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestParam</span>(name = <span class="string">"user"</span>,  required = <span class="keyword">false</span>) String username</span><br></pre></td></tr></table></figure><h4 id="4-Bean方式获取参数"><a href="#4-Bean方式获取参数" class="headerlink" title="4. Bean方式获取参数"></a>4. Bean方式获取参数</h4><p>对于请求参数比较复杂的情况下，我比较喜欢这种使用姿势，管理起来方便简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDO</span> </span>&#123;</span><br><span class="line">    String user;</span><br><span class="line">    String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"req4"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">req4</span><span class="params">(UserDO userDO)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"req4 userDO: "</span> + userDO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试case</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># case1</span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req4?password=123456&amp;user=%E5%B0%8F%E7%81%B0%E7%81%B0Blog</span><br><span class="line"><span class="section">## 输出: req4 userDO: DemoController.UserDO(user=小灰灰Blog, password=123456)</span></span><br><span class="line"><span class="section"># case2</span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req4?password=123456</span><br><span class="line"><span class="section">## 输出: req4 userDO: DemoController.UserDO(user=null, password=123456)</span></span><br></pre></td></tr></table></figure><p> <span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #33F6FF">说明:</span></p><ul><li>定义一个bean，内部属性和请求参数对应</li><li>允许参数不存在的情况，会使用null代替（所以，尽量不要使用非封装基本类型，否则参数不传时，会抛异常）</li><li>bean的属性，可以根据实际情况指定类型</li></ul><h4 id="5-ModelAttribute注解方式"><a href="#5-ModelAttribute注解方式" class="headerlink" title="5. ModelAttribute注解方式"></a>5. ModelAttribute注解方式</h4><p>@ModelAttribute注解的方法，会优于Controller之前执行，一般更常见于向视图传输数据使用，此处不详细展开，正常来讲，专门的获取参数不太会用这这种方式来玩</p><h4 id="6-Path参数"><a href="#6-Path参数" class="headerlink" title="6. Path参数"></a>6. Path参数</h4><p>Path参数，专指的是请求路径的参数，如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/webs/demo/req4?password=123456</span><br><span class="line">上面这个url中，password是我们传统意义上的请求参数，其中path参数则是指其中 req4, demo这种path路径中的一环；对此，最常见的一个case就是常见的博客中,如开源中国的一个博客链接</span><br><span class="line"></span><br><span class="line">https://my.oschina.net/u/566591/blog/1601400</span><br><span class="line">566591 : 这个参数主要用来区分用户</span><br><span class="line">1601400 : 这个参数则主要是表示对应的博文</span><br><span class="line">一般path参数的获取方式如下</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"req6/&#123;user&#125;/info"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">req6</span><span class="params">(@PathVariable(name = <span class="string">"user"</span>)</span> String user) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"req6 user: "</span> + user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试case</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># case1 </span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req6/blog/info?user=haha</span><br><span class="line"><span class="section">## 输出：req6 user: blog</span></span><br><span class="line"></span><br><span class="line"><span class="section"># case2</span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req6/blog?user=haha</span><br><span class="line"><span class="section">## 输出: 404</span></span><br><span class="line"></span><br><span class="line"><span class="section"># case3</span></span><br><span class="line">http://127.0.0.1:8080/webs/demo/req6/info?user=haha</span><br><span class="line"><span class="section">## 输出: 404</span></span><br></pre></td></tr></table></figure><p> <span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #FF5733">注意:</span></p><ul><li>path参数的使用，需要确保参数存在且类型匹配</li><li>path参数和url参数不会相互影响</li></ul><h3 id="II-POST请求参数获取"><a href="#II-POST请求参数获取" class="headerlink" title="II. POST请求参数获取"></a>II. POST请求参数获取</h3><p>POST请求参数，更多的是看提交表单参数是否可以获取到，以及如何获取，主要的手段依然是上面几种方式，下面验证下是否ok</p><h4 id="1-HttpServletRequest方式获取参数"><a href="#1-HttpServletRequest方式获取参数" class="headerlink" title="1. HttpServletRequest方式获取参数"></a>1. HttpServletRequest方式获取参数</h4><p>测试case，可以借助curl来实现post请求</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># case1 </span></span><br><span class="line">curl -d "user=小灰灰Blog&amp;password=123456" "http://127.0.0.1:8080/webs/demo/req1"</span><br><span class="line"><span class="section">## 输出： req1 user: 小灰灰Blog pwd: 123456</span></span><br><span class="line"></span><br><span class="line"><span class="section"># case2</span></span><br><span class="line">curl -d "user=小灰灰Blog" "http://127.0.0.1:8080/webs/demo/req1?password=123456"</span><br><span class="line"><span class="section">## 输出：req1 user: 小灰灰Blog pwd: 12345</span></span><br><span class="line"></span><br><span class="line"><span class="section"># case3</span></span><br><span class="line">curl -d "user=小灰灰Blog" "http://127.0.0.1:8080/webs/demo/req1?user=greyBlog"</span><br><span class="line"><span class="section">## 输出：req1 user: greyBlog pwd: null</span></span><br></pre></td></tr></table></figure><p>curl也可以换成js请求测试方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">formData.append(<span class="string">"user"</span>, <span class="string">"小灰灰Blog"</span>);</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  url: <span class="string">'http://127.0.0.1:8080/webs/demo/req1?password=123456'</span>,</span><br><span class="line">  type: <span class="string">'post'</span>,</span><br><span class="line">  cache: <span class="literal">false</span>,</span><br><span class="line">  data: formData,</span><br><span class="line">  processData: <span class="literal">false</span>,</span><br><span class="line">  contentType: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> <span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #33F6FF">说明:</span></p><ul><li>对于HttpServletReuqest方式获取参数时，get和post没什么区别</li><li>若url参数和表单参数同名了，测试结果显示使用的是url参数（待确认，当然最好不要这么干）<h4 id="2-方法参数获取"><a href="#2-方法参数获取" class="headerlink" title="2. 方法参数获取"></a>2. 方法参数获取</h4>几个测试demo如下</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># case 1</span></span><br><span class="line">curl -d "user=小灰灰Blog&amp;password=123456" "http://127.0.0.1:8080/webs/demo/req2"</span><br><span class="line"><span class="section">## 输出： req2 user: 小灰灰Blog pwd: 123456</span></span><br><span class="line"></span><br><span class="line"><span class="section"># case 2</span></span><br><span class="line">curl -d "password=123456" "http://127.0.0.1:8080/webs/demo/req2"</span><br><span class="line"><span class="section">## 输出：req2 user: null pwd: 123456</span></span><br><span class="line"></span><br><span class="line"><span class="section"># case 3</span></span><br><span class="line">curl -d "password=123456" "http://127.0.0.1:8080/webs/demo/req2?user=blog"</span><br><span class="line"><span class="section">## 输出： req2 user: blog pwd: 123456</span></span><br><span class="line">基本上使用姿势和get没什么区别</span><br></pre></td></tr></table></figure><h4 id="3-RequestParam注解方式"><a href="#3-RequestParam注解方式" class="headerlink" title="3. RequestParam注解方式"></a>3. RequestParam注解方式</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># case 1</span></span><br><span class="line"><span class="string">curl</span> <span class="bullet">-d</span> <span class="string">"password=123456&amp;user=blog"</span> <span class="string">"http://127.0.0.1:8080/webs/demo/req3"</span></span><br><span class="line"><span class="comment">## 输出： req3 user: blog pwd: 123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># case 2</span></span><br><span class="line"><span class="string">curl</span> <span class="bullet">-d</span> <span class="string">"password=123456"</span> <span class="string">"http://127.0.0.1:8080/webs/demo/req3?user=blog"</span></span><br><span class="line"><span class="comment">## 输出： req3 user: blog pwd: 123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># case 3</span></span><br><span class="line"><span class="string">curl</span> <span class="bullet">-d</span> <span class="string">"password=123456&amp;user=blog"</span> <span class="string">"http://127.0.0.1:8080/webs/demo/req3?password=900"</span></span><br><span class="line"><span class="comment">## 输出：req3 user: blog pwd: 900,123456</span></span><br></pre></td></tr></table></figure><p> <span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #FF5733">注意:</span></p><ul><li>和前面的两种方式不同的是，当post表单的参数和url参数同名时，会合并成一个字符串<h4 id="4-Bean方式"><a href="#4-Bean方式" class="headerlink" title="4. Bean方式"></a>4. Bean方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## case1 </span></span><br><span class="line">curl -d "password=123456&amp;user=blog" "http://127.0.0.1:8080/webs/demo/req4?password=900"</span><br><span class="line"><span class="section">## 输出 req4 userDO: DemoController.UserDO(user=blog, password=900,123456)</span></span><br><span class="line"></span><br><span class="line"><span class="section">## case2</span></span><br><span class="line">curl -d "password=123456&amp;user=blog" "http://127.0.0.1:8080/webs/demo/req4"</span><br><span class="line"><span class="section">## 输出 req4 userDO: DemoController.UserDO(user=blog, password=123456)</span></span><br><span class="line"></span><br><span class="line"><span class="section">## case3</span></span><br><span class="line">curl -d "password=123456" "http://127.0.0.1:8080/webs/demo/req4"</span><br><span class="line"><span class="section">## 输出 req4 userDO: DemoController.UserDO(user=null, password=123456)</span></span><br><span class="line">这种方式不区分get,post，所以完全复杂的交互接口，完全可以考虑用bean的方式来定义请求参数</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-PathVariable"><a href="#5-PathVariable" class="headerlink" title="5. PathVariable"></a>5. PathVariable</h4><p>这个没法玩…</p><h3 id="III-多媒体上传参数获取"><a href="#III-多媒体上传参数获取" class="headerlink" title="III. 多媒体上传参数获取"></a>III. 多媒体上传参数获取</h3><p>上传文件的支持，对于传统的spring-mvc来说，可能需要一些添加一些相关配置，不在本文的范畴内，下面默认已经配置好</p><h4 id="1-实例支持"><a href="#1-实例支持" class="headerlink" title="1. 实例支持"></a>1. 实例支持</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = &#123;<span class="string">"wx/upload"</span>, <span class="string">"wx/wx/upload"</span>&#125;, method = &#123;RequestMethod.GET, RequestMethod.POST, RequestMethod.OPTIONS&#125;)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    MultipartFile file = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (request <span class="keyword">instanceof</span> MultipartHttpServletRequest) &#123;</span><br><span class="line">        file = ((MultipartHttpServletRequest) request).getFile(<span class="string">"image"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"图片不能为空!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来说，主要是利用HttpServletRequest来获取上传的文件</p><p> <span style="font: 22px '宋体','Arial Narrow',HELVETICA; color: #FF5733">注意:</span></p><ul><li>如果接口必须要求上传文件，可以直接把参数声明为 MultipartHttpServletRequest， 此时调用方如果不传参数，会被异常拦截（可以通过@ControllerAdvice来拦截全局异常）</li><li>如果可以不上传文件，则可以用上面的这种猥琐姿势，内部进行判断</li><li>((MultipartHttpServletRequest) request).getFile(xxx)来获取指定名的上传文件<h3 id="IV-小结"><a href="#IV-小结" class="headerlink" title="IV. 小结"></a>IV. 小结</h3><h4 id="1-五种获取参数的姿势"><a href="#1-五种获取参数的姿势" class="headerlink" title="1. 五种获取参数的姿势"></a>1. 五种获取参数的姿势</h4></li></ul><table><thead><tr><th align="left">方式</th><th align="left">注意事项</th></tr></thead><tbody><tr><td align="left">HttpServletRequest获取参数</td><td align="left">最常见通用</td></tr><tr><td align="left">方法参数与请求参数同名</td><td align="left">注意参数名统一，注意类型一致，尽量不用非包装基本类型</td></tr><tr><td align="left">@RequestParam注解</td><td align="left">同上，可注解内指定http参数名</td></tr><tr><td align="left">Bean方式</td><td align="left">定义一个bean，会将同名的http参数赋值进去，推荐</td></tr><tr><td align="left">@PathVariable 注解</td><td align="left">请求url参数</td></tr></tbody></table><h4 id="2-传文件使用姿势"><a href="#2-传文件使用姿势" class="headerlink" title="2. 传文件使用姿势"></a>2. 传文件使用姿势</h4><ul><li>使用MultipartHttpServletRequest来获取上传的文件，当然也可以获取基本的请求参数</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 注解 @RequestParam 的使用</title>
      <link href="/2019/05/14/requestparam/"/>
      <url>/2019/05/14/requestparam/</url>
      
        <content type="html"><![CDATA[<h3 id="RequestParam-参数加与不加的区别"><a href="#RequestParam-参数加与不加的区别" class="headerlink" title="@RequestParam 参数加与不加的区别"></a>@RequestParam 参数加与不加的区别</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(@RequestParam <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种写法参数为非必传，第二种写法参数为必传。参数名为userId。</p><p>第二种写法可以通过@RequestParam(required = false)设置为非必传。因为required值默认是true，所以默认必传。</p><p>第二种写法可以通过@RequestParam(“userId”)或者@RequestParam(value = “userId”)指定参数名。</p><p>第二种写法可以通过@RequestParam(defaultValue = “0”)指定参数默认值</p><blockquote><p>当@RequestParam(required = false) 或不加 @RequestParam时, 参数类型为int,该参数不传,会报错,因为如果不传,会把null 复制到int,会报错.   <strong>推荐使用包装类Integer</strong> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot  Value 注解注入static 字段</title>
      <link href="/2019/05/14/springboot-value-zhu-jie-zhu-ru-static-zi-duan/"/>
      <url>/2019/05/14/springboot-value-zhu-jie-zhu-ru-static-zi-duan/</url>
      
        <content type="html"><![CDATA[<h3 id="普通参数使用-Value-示例"><a href="#普通参数使用-Value-示例" class="headerlink" title="普通参数使用@Value 示例:"></a>普通参数使用@Value 示例:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String port;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="但是在注入static字段时-直接使用-Value-为静态变量赋值是不行的，可以使用-set-方法："><a href="#但是在注入static字段时-直接使用-Value-为静态变量赋值是不行的，可以使用-set-方法：" class="headerlink" title="但是在注入static字段时,直接使用 @Value 为静态变量赋值是不行的，可以使用 set 方法："></a>但是在注入static字段时,直接使用 @Value 为静态变量赋值是不行的，可以使用 set 方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test.host&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHost</span><span class="params">(String host)</span> </span>&#123;</span><br><span class="line">        Utils.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test.port&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(String port)</span> </span>&#123;</span><br><span class="line">        Utils.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，需要使用 @Component 注解。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ActiveMQ 入门</title>
      <link href="/2019/05/08/activeMQ-introduction/"/>
      <url>/2019/05/08/activeMQ-introduction/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>MQ是消息中间件，是一种在分布式系统中应用程序借以传递消息的媒介，常用的有ActiveMQ，RabbitMQ，kafka。ActiveMQ是Apache下的开源项目，完全支持JMS1.1和J2EE1.4规范的JMS Provider实现。</p><a id="more"></a>  <h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ol><li><p>支持多种语言编写客户端 </p></li><li><p>对spring的支持，很容易和spring整合 </p></li><li><p>支持多种传输协议：TCP,SSL,NIO,UDP等 </p></li><li><p>支持AJAX </p><h4 id="消息形式："><a href="#消息形式：" class="headerlink" title="消息形式："></a>消息形式：</h4></li><li><p>点对点（queue） </p></li><li><p>一对多（topic）</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p><a href="https://blog.csdn.net/ytangdigl/article/details/77740100" target="_blank" rel="noopener">参考链接</a></p><ol><li>下载apache-activemq-5.13.1-bin.tar.gz <br><br>下载地址：<a href="http://download.csdn.net/download/u014223912/9464747" target="_blank" rel="noopener">http://download.csdn.net/download/u014223912/9464747</a></li></ol></blockquote><ol start="2"><li><p>下载后解压 </p></li><li><p>进入到/apache-activemq-5.13.1/bin/macosx目录 </p></li><li><p>启动ActiveMQ</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./activemq start</span><br></pre></td></tr></table></figure></li><li><p>在浏览器中 <a href="http://127.0.0.1:8161/admin/" target="_blank" rel="noopener">http://127.0.0.1:8161/admin/</a>   默认用户名密码都为admin</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/jiuqiyuliang/article/category/5617711" target="_blank" rel="noopener">https://blog.csdn.net/jiuqiyuliang/article/category/5617711</a></p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> ActiveMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 安装 Mysql</title>
      <link href="/2019/04/29/macInstallMysql/"/>
      <url>/2019/04/29/macInstallMysql/</url>
      
        <content type="html"><![CDATA[<p>### </p><p><a href="https://www.jianshu.com/p/4cb5ef29a099" target="_blank" rel="noopener">https://www.jianshu.com/p/4cb5ef29a099</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> brew </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git SSH 和 HTTP 的区别</title>
      <link href="/2019/04/24/git-ssh-he-http-de-qu-bie/"/>
      <url>/2019/04/24/git-ssh-he-http-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>最近项目迁移到git上去,在提交代码时遇到了要每次输入账号密码的情况,查看资料时了解到了 http 和ssh 的问题,特此记录.<br>百度了一下,大部分的回答如下:</p><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>使用 http url 克隆对初学者来说会比较方便，复制 http url 然后到命令行里面直接用 git clone 命令克隆到本地就好了，在执行 clone 命令之后需要输入你的 GitLab 的帐号和密码。使用 git Bash 每次都需要输入帐号和密码，不过在使用 PhpStorm 时，PhpStorm 会记住你的用户名和密码，只需第一次使用时输入就好。</p><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>使用 SSH url 克隆却需要在克隆之前先配置和添加好 SSH key ，因此，如果你想要使用 SSH url 克隆的话，你必须是这个项目的拥有者。否则你是无法添加 SSH key 的，另外 ssh 默认是每次 fetch 和 push 代码都不需要输入账号和密码。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sourceTree 每次提交代码都要输入账号密码</title>
      <link href="/2019/04/24/sourcetree-mei-ci-ti-jiao-dai-ma-du-yao-shu-ru-zhang-hao-mi-ma/"/>
      <url>/2019/04/24/sourcetree-mei-ci-ti-jiao-dai-ma-du-yao-shu-ru-zhang-hao-mi-ma/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h3><p> 使用ssh 方式做免密处理</p><!-- more --><p>如果必须使用http 的方式</p><h3 id="方法二-在-git目录中有个config目录，在路径前配置下用户名和密码即可，如下所示："><a href="#方法二-在-git目录中有个config目录，在路径前配置下用户名和密码即可，如下所示：" class="headerlink" title="方法二:在.git目录中有个config目录，在路径前配置下用户名和密码即可，如下所示："></a>方法二:在.git目录中有个config目录，在路径前配置下用户名和密码即可，如下所示：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">    repositoryformatversion = 0</span><br><span class="line">    filemode = false</span><br><span class="line">    bare = false</span><br><span class="line">    logallrefupdates = true</span><br><span class="line">    symlinks = false</span><br><span class="line">    ignorecase = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">    url = http://账号:&apos;密码&apos;@192.168.10.7:8090/test/Django.git</span><br><span class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">    remote = origin</span><br><span class="line">    merge = refs/heads/master</span><br></pre></td></tr></table></figure><h3 id="方法三-设置对所有项目有效"><a href="#方法三-设置对所有项目有效" class="headerlink" title="方法三:设置对所有项目有效"></a>方法三:设置对所有项目有效</h3><p>git config –global credential.helper osxkeychain  #第一次需要输入密码，以后都不需要了</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> sourceTree </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
